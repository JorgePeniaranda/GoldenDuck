generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum role {
  ADMIN
  SUPPORT
  USER
}

enum sex {
  MALE
  FEMALE
}

model User {
  id                Int               @id @default(autoincrement())
  name              String
  lastName          String
  dni               BigInt
  email             String
  phoneNumber       BigInt
  password          String
  address           String
  birthDate         DateTime
  sex               sex
  updatedAt         DateTime          @default(now())
  createdAt         DateTime          @default(now())
  deleted           Boolean           @default(false)
  role              role              @default(USER)
  account           Account[]
  sessions          Session[]
}

model Session {
  id                Int               @id @default(autoincrement())
  idUser            Int
  ip                String?
  userAgent         String?
  date              DateTime          @default(now())
  user              User              @relation(fields: [idUser], references: [id])
}

model Account {
  id                Int               @id @default(autoincrement())
  idUser            Int
  balance           BigInt            @default(0)
  imgUrl            String?
  updatedAt         DateTime          @default(now())
  createdAt         DateTime          @default(now())
  deleted           Boolean           @default(false)
  user              User              @relation(fields: [idUser], references: [id])
  notifications     Notification[]
  messagesTo        Message[]         @relation(name: "toAccount")
  messagesFrom      Message[]         @relation(name: "fromAccount")
  cards             Card[]
  transactionsTo    Transaction[]     @relation(name: "toAccount")
  transactionsFrom  Transaction[]     @relation(name: "fromAccount")
  loans             Loan[]
  investments       Investment[]
}

model Message {
  id                Int               @id @default(autoincrement())
  from              Int
  to                Int
  message           String
  read              Boolean           @default(false)
  date              DateTime          @default(now())
  updatedAt         DateTime          @default(now())
  deleted           Boolean           @default(false)
  accountTo         Account           @relation(name: "toAccount", fields: [to], references: [id])
  accountFrom       Account           @relation(name: "fromAccount", fields: [from], references: [id])
}

model Notification {
  id                Int               @id @default(autoincrement())
  idAccount         Int
  message           String
  read              Boolean           @default(false)
  date              DateTime          @default(now())
  account           Account           @relation(fields: [idAccount], references: [id])
}

model Card {
  id                Int               @id @default(autoincrement())
  idAccount         Int
  number            BigInt
  cvv               Int
  expiration        DateTime
  updatedDate       DateTime          @default(now())
  deleted           Boolean           @default(false)
  account           Account           @relation(fields: [idAccount], references: [id])
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  deleted           Boolean           @default(false)
  transactions      Transaction[]
}

model Transaction {
  id                Int               @id @default(autoincrement())
  from              Int
  to                Int
  amount            BigInt
  idCategory        Int?
  date              DateTime          @default(now())
  accountTo         Account           @relation(name: "toAccount", fields: [to], references: [id])
  accountFrom       Account           @relation(name: "fromAccount", fields: [from], references: [id])
  category          Category?         @relation(fields: [idCategory], references: [id])
}

model Loan {
  id                Int               @id @default(autoincrement())
  idAccount         Int
  amount            BigInt
  interest          Float
  date              DateTime          @default(now())
  dateEnd           DateTime
  account           Account           @relation(fields: [idAccount], references: [id])
}

model Investment {
  id                Int               @id @default(autoincrement())
  idAccount         Int
  amount            BigInt
  interest          Float
  date              DateTime          @default(now())
  dateEnd           DateTime
  account           Account           @relation(fields: [idAccount], references: [id])
}

model Error {
  id                Int               @id @default(autoincrement())
  name              String?
  message           String?
  date              DateTime          @default(now())
  deleted           Boolean           @default(false)
}